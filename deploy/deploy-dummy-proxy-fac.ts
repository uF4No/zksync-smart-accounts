
import { HardhatRuntimeEnvironment } from "hardhat/types";
import { ethers } from "ethers";
import { Provider, utils } from "zksync-ethers";
import {getWallet} from "./utils"

// as well as verify it on Block Explorer if possible for the network
export default async function (hre: HardhatRuntimeEnvironment) {
  // LOCAL
  // const IMPLEMENTATION_ADDR = "0xbE0e545504Eb4fA9Fa0de8D01CC227A4A3B8558D"
  // testnet
  const IMPLEMENTATION_ADDR = "0xdC4f487fd545771Ae7F2073DB2793eeeDc32249f"
  console.log(`Running script on ${hre.network.name} network`);
  
  const facArtifactName = "DummyProxyFactory";
  // const accArtifactName = "TransparentUpgradeableProxy";
  const proxyArtifactName = "contracts/TransparentUpgradeableProxy.sol:TransparentUpgradeableProxy";
  const facArtifact = await hre.deployer.loadArtifact(facArtifactName);
  const proxyArtifact = await hre.deployer.loadArtifact(proxyArtifactName);
  // Getting the bytecodeHash of the account
  const proxyBytecodeHash = utils.hashBytecode(proxyArtifact.bytecode);
  console.log("Generated bytecode hash...");
  const factoryContract = await hre.deployer.deploy(
    // artifact to deploy
    facArtifact, 
    // constructor params
    [proxyBytecodeHash, IMPLEMENTATION_ADDR], 
    // deployment type
    "create", 
    // tx overrides
    undefined, 
    // factory deps
    [proxyArtifact.bytecode]
  );
    
  const factoryAddress = await factoryContract.getAddress();
  console.log(`Factory deployed to: ${factoryAddress}`);

  if(!hre.network.name.includes("Node")) {
    const fullContractSource = `${facArtifact.sourceName}:${facArtifact.contractName}`;
    await hre.run("verify:verify", {
      address: factoryAddress,
      constructorArguments: [proxyBytecodeHash, IMPLEMENTATION_ADDR],
      contract: fullContractSource,
      noCompile: true,
    });
  }


  console.log(`Deploying proxy account from factory...`);

  // use zero hash as salt for account creation
  const createAccTx = await factoryContract.deployProxyAccount(ethers.ZeroHash)
  console.log(`Transaction hash of creating account: ${createAccTx.hash}`);
  createAccTx.wait()

  console.log('Calculating address of the account...');
  const wallet = await getWallet();
  
  const ADMIN_ADDR = await wallet.getAddress();
  console.log('ADMIN_ADDR :>> ', ADMIN_ADDR);
  // const DATA_BYTES = new Uint8Array();
  const DATA_BYTES = "0x"

  const abiCoder = new ethers.AbiCoder();

  const accountAddress = utils.create2Address(
    // sender
    factoryAddress,
    // bytecodeHash
    await factoryContract.aaBytecodeHash(),
    // salt
    ethers.ZeroHash,
    // input
    abiCoder.encode(["address", "address", "bytes"], [IMPLEMENTATION_ADDR, ADMIN_ADDR, DATA_BYTES])
    
    
  );
  console.log(`Account deployed on address ${accountAddress}`);


  
}
